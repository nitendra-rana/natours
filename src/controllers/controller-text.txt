// const fs = require('fs');
// const Tour = require('../models/tourModal');

// const { sendFailRequest } = require('../helper.js/toursHelper');
/** *
const dataDirectory = `${__dirname}/../dev-data/data`;
const fileName = 'tours-simple.json';

/** *
// helpers functions
/** *
exports.checkId = (req, res, next, val) => {
  if (req.params.id * 1 === 1000) {
    return sendFailRequest(req, res);
  }
  next();
};

exports.checkBody = (req, res, next) => {
  if (!req.body.name || !req.body.price) {
    return sendFailRequest(req, res);
  }
  next();
};

/** *
const writeFile = (data, res, returnData) => {
  fs.writeFile(`${dataDirectory}/${fileName}`, JSON.stringify(data), (err) => {
    if (err) throw err;
    sendWriteResponse(res, returnData);
  });
};
/** */
/** *
const tours = JSON.parse(fs.readFileSync(`${dataDirectory}/${fileName}`));
/** */

/**controllers or handlers*/

// exports.getTour = async (req, res) => {
//   // eslint-disable-next-line prefer-destructuring
//   const params = req.params;
//   const id = params.id * 1;
//   if (req.params.id) {
//     // let responseData = [].find((t) => t.id === id);
//     // res.status(200).json({
//     //   requestAt: req.requestTime,
//     //   status: 'success',
//     //   data: {
//     //     results: responseData.length ? responseData.length : 1,
//     //     tours: responseData,
//     //   },
//     // });
//   }
// };

//query filters
/**
    //Mongodb Way
    const tours = await Tour.find({
      duration: 5,
      difficulty: 'easy',
    });
    /**/

/** *
    //Mongoose way
    const tours = await Tour.find()
      .where('duration')
      .equals(5)
      .where('difficulty')
      .equals('easy');
    /** */

      /**
     * BUILD QUERY
     *

    //1. Filtering

    const queryObject = { ...req.query };
    const excludeFields = ['page', 'sort', 'limit', 'fields'];
    excludeFields.forEach((el) => delete queryObject[el]);

    //2. Advance Filtering
    /*
     * {difficulty:'easy', duration:{ $gte:5 }} //Query to be applied
     * {difficulty:'easy', duration:{ $gte:5 }} // Recived Query
     * gte, gt, lte, lt //these are the operators that we can recieve
     * We should write the documentation to let user know which operation is allowed or not.
     */
    let queryString = JSON.stringify(queryObject);
    queryString = JSON.parse(
      queryString.replace(/\b(gte|gt|lte|lt)\b/g, (match) => `$${match}`), // Regular expression to replace gte => $gte
    );
    /** */

    let query = Tour.find(queryString);

    //3. Sorting the items

    if (req.query.sort) {
      const sortBy = req.query.sort.split(',').join(' ');
      query = query.sort(sortBy); // to sort in descending, include minus in query.
    }
    //4) Field limiting

    if (req.query.fields) {
      const fields = req.query.fields.split(',').join(' ');
      query = query.select(fields);
    } else {
      query = query.select('-__v'); // minus means we are excluding the fields.
    }

    //5) Pagination
    /**
     * page=5&limit=10
     * Skip: no of items to skip [40]
     * limit: no of items to pe send over.[10]
     */
    const page = req.query.page * 1 || 1;
    const limit = req.query.limit * 1 || 10;
    const skip = (page - 1) * limit;
    query = query.skip(skip).limit(limit);

    if (req.query.page) {
      const numTours = await Tour.countDocuments(); //To get total document we need to execute query by this method.
      if (skip >= numTours) {
        throw new Error('This page dose not exists.');
      }
    }
    //Final query is something chain  query.sort().select().skip().limit()
